# -*- coding: utf-8 -*-
"""BATCH 8 - Assignment 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sjUhJY30cDnR4Qku4L1X6sYFitk7rM9y
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
pd.options.display.max_rows = None
pd.options.display.max_columns = None

data = pd.read_csv('/content/drive/MyDrive/day-6-dataset/Churn_Modelling.csv')

data.info()

data.dtypes

data.shape

data.head()

for i in range(len(data.columns)):
        print('Column_Name ------->',data.columns[i], '    ######    ','Unique values count in dataset ----->', len(data[data.columns[i]].unique()) )

data.drop(columns=['RowNumber','CustomerId','Surname'], inplace = True)
data.shape

_=sns.countplot(data = data, x='Geography')

_=sns.countplot(data = data, x='Gender')

_=sns.displot(data = data, x ='Tenure', kind = 'hist', color = 'g')

_=sns.displot(data = data, x = 'NumOfProducts', kind = 'ecdf', color ='y')

_=sns.countplot(data = data, x ='HasCrCard')

_= sns.displot(data = data, x ='CreditScore', kind='hist', color ='seagreen')

x1 = pd.cut(data['CreditScore'],
            bins = [300,450,550,650,750,900],           
            labels= ["lev1", "lev2","lev3", "lev4", "lev5"]
        )
_=sns.displot(data = x1,  kind = 'hist', color ='lime')

_=sns.displot(data = data,x = 'Age',  kind = 'kde')

x2 = pd.cut(data['Age'],
            bins = [0,18,30,40,60,100],           
            labels= ["Teenager", "Youth","Young-Age", "Mid-Age", "Old-Age"]
        )
_=sns.displot(data = x2,  kind = 'hist',color ='coral')

_=sns.displot(data = data,x = 'Balance',  kind = 'hist', bins =10,color ='olive')

_=sns.displot(data = data,x = 'EstimatedSalary',  kind = 'hist', bins = 15, color ='m')

_= sns.jointplot(
                 data = data,
                 x = 'CreditScore',
                 y = 'EstimatedSalary',
                 kind = "scatter",
                 color = 'darkcyan'
                )

_= sns.jointplot(
                 data = data,
                 x = 'CreditScore',
                 y = 'Age',
                 kind = "kde",
                 color = 'seagreen'
                )

_= sns.jointplot(
                 data = data,
                 x = 'Age',
                 y = 'Balance',
                 kind = "hist",
                 color = 'c'
                )

_= sns.jointplot(
                 data = data,
                 x = 'Age',
                 y = 'NumOfProducts',
                 kind = "hex",
                 color = 'coral'
                )

_=sns.boxplot(x = 'Exited',       
              y = 'CreditScore', 
              data = data,
              color = 'r'
              )

_=sns.boxplot(x = 'Exited',       
              y = 'Age', 
              data = data,
              color = 'g'
              )

_=sns.boxplot(x = 'Exited',       
              y = 'Tenure', 
              data = data,
              color = 'b'
              )

_=sns.boxplot(x = 'Exited',       
              y = 'Balance', 
              data = data,
              color = 'olive'
              )

_=sns.boxplot(x = 'Exited',       
              y = 'NumOfProducts', 
              data = data,
              color = 'm'
              )

_=sns.boxplot(x = 'Exited',       
              y = 'EstimatedSalary', 
              data = data,
              color = 'peru'
              )

df1 = pd.crosstab(data['Geography'], data['Exited'])
df1

_= sns.heatmap(df1)

df2 = pd.crosstab(data['Gender'], data['Exited'])
df2

_= sns.heatmap(df2)

df3 = pd.crosstab(data['HasCrCard'], data['Exited'])
df3

_= sns.heatmap(df3)

df4 = pd.crosstab(data['IsActiveMember'], data['Exited'])
df4

_= sns.heatmap(df4)

_= sns.catplot(x = 'Geography', y = 'CreditScore', hue = 'Exited', kind ='box', data = data)

_= sns.catplot(x = 'Gender', y = 'CreditScore', hue = 'Exited', kind ='boxen', data = data)

_= sns.catplot(x = 'NumOfProducts', y = 'CreditScore', hue = 'Exited', kind ='violin', data = data)

_= sns.catplot(x = 'Gender', y = 'Age', hue = 'Exited', kind ='strip', data = data, split=True)

_= sns.displot(data = data, x = 'Age', hue = 'Exited', kind = 'kde')

_= sns.displot(data = data, x = 'CreditScore', hue = 'Exited', kind = 'kde')

data.columns

_= sns.displot(data = data, x = 'Geography', hue = 'Exited', kind = 'hist')

# check for missing value
data.isnull().sum()

# dealing with outliers
import seaborn as sns

sns.boxplot(data['Balance'])

# Encoding
 from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

data['Balance'] = le.fit_transform(data['Balance'])

data.head()

# separting dependent and independent columns
   
   y = data['EstimatedSalary']
   x = data.drop(columns = ['EstimatedSalary'],axis = 1)

names = x.columns

names

x = pd.DataFrame(x,columns= names)

x.head()

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 20)

from sklearn import metrics

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 10)

x_train.shape

x_test.shape

# upper exterme = q3+1.5*IQR
# lower exterme = q2+1.5*IQR
# IQR = q3-q2
qnt = data.quantile(q = [0.31,0.45])

qnt

data[data['Tenure']>20]

data[data['CreditScore']>1000]

data[data['Tenure']<50]

data[data['CreditScore']<2000]

# replacing outlier with mean

data['Balance'] = np.where(data['Balance']>90000,data['Balance'].mean(),data['Balance'])

data[data['Balance']>90000]